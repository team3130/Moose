package frc.robot.commands.Climber;import edu.wpi.first.wpilibj2.command.CommandBase;import frc.robot.RobotContainer;import frc.robot.subsystems.Climber;public class spinClimberWinches extends CommandBase {private final Climber m_climber;public spinClimberWinches(Climber subsystem) {m_climber = subsystem;m_requirements.add(subsystem);}/*** The initial subroutine of a command.  Called once when the command is initially scheduled.*/@Override public void initialize() {}/*** The main body of a command.  Called repeatedly while the command is scheduled.* (That is, it is called repeatedly until {@link #isFinished()}) returns true.)*/@Override public void execute() {double left = RobotContainer.m_weaponsGamepad.getRawAxis(1) * -0.85;double right = RobotContainer.m_weaponsGamepad.getRawAxis(5) * -0.85;if (m_climber.brokeLeft() && left <= 0) {left = 0;} if (m_climber.brokeRight() && right <= 0) {right = 0;}m_climber.setSpeedLeft(left);m_climber.setSpeedRight(right);}/*** <p>* Returns whether this command has finished. Once a command finishes -- indicated by* this method returning true -- the scheduler will call its {@link #end(boolean)} method.* </p><p>* Returning false will result in the command never ending automatically. It may still be* cancelled manually or interrupted by another command. Hard coding this command to always* return true will result in the command executing once and finishing immediately. It is* recommended to use * {@link edu.wpi.first.wpilibj2.command.InstantCommand InstantCommand}* for such an operation.* </p>** @return whether this command has finished.*/@Override public boolean isFinished() {return false;}/*** The action to take when the command ends. Called when either the command* finishes normally -- that is it is called when {@link #isFinished()} returns* true -- or when  it is interrupted/canceled. This is where you may want to* wrap up loose ends, like shutting off a motor that was being used in the command.** @param interrupted whether the command was interrupted/canceled*/@Override public void end(boolean interrupted) {m_climber.setSpeedRight(0);m_climber.setSpeedLeft(0);}}